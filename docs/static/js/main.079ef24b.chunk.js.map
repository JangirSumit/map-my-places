{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","backgroundSize","cardContent","flexGrow","footer","paddingLeft","backdrop","zIndex","drawer","color","root","justifyContent","flexWrap","margin","Copyright","Typography","variant","align","Link","href","Date","getFullYear","App","classes","useState","data","setData","q","a","search","request","fetch","json","result","records","useEffect","fetchData","CssBaseline","AppBar","position","style","Toolbar","Avatar","src","className","rounded","noWrap","Container","fixed","center","length","filter","Latitude","Longitude","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","TileLayer","url","map","d","index","Marker","key","Popup","Card","CardContent","gutterBottom","component","substring","Box","fontStyle","split","c","Chip","size","label","Divider","CardActions","Button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.079ef24b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Container,\n  CssBaseline,\n  Typography,\n  Link,\n  AppBar,\n  Toolbar,\n  Avatar,\n  Card,\n  CardContent,\n  CardActions,\n  Divider,\n  Button,\n  Box,\n  Chip,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(4, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\", // 16:9\n    backgroundSize: \"90% 90%\",\n    backgroundColor: \"#fafafa\",\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n  paddingLeft: {\n    paddingLeft: \"5px\",\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(0.5),\n    },\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [data, setData] = useState([]);\n\n  async function fetchData(q) {\n    let search = q ? `&q=${q}` : \"\";\n    let request = fetch(\n      \"https://www.data.qld.gov.au/api/3/action/datastore_search?resource_id=8b9178e0-2995-42ad-8e55-37c15b4435a3\" +\n        search\n    );\n    let data = await (await request).json();\n    setData(data.result.records);\n  }\n\n  useEffect(() => {\n    fetchData(\"\");\n  }, [\"\"]);\n\n  return (\n    <>\n      <CssBaseline />\n      <AppBar position=\"relative\" style={{ background: \"#f44336\" }}>\n        <Toolbar>\n          <Avatar\n            variant=\"rounded\"\n            src=\"https://jangirsumit.github.io/science-capability-directory/static/media/science%20(3).a0a6971c.png\"\n            className={classes.rounded}\n          ></Avatar>\n          <Typography\n            variant=\"h6\"\n            color=\"inherit\"\n            noWrap\n            className={classes.paddingLeft}\n          >\n            RecourceFinda\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main>\n        <div className={classes.heroContent}>\n          <Container fixed>\n            <LeafletMap\n              center={\n                data && data.length\n                  ? [\n                      data.filter((a) => a.Latitude && a.Longitude)[0].Latitude,\n                      data.filter((a) => a.Latitude && a.Longitude)[0]\n                        .Longitude,\n                    ]\n                  : [0, 0]\n              }\n              zoom={data && data.length ? 3 : 1}\n              maxZoom={18}\n              attributionControl={true}\n              zoomControl={true}\n              doubleClickZoom={true}\n              scrollWheelZoom={true}\n              dragging={true}\n              animate={true}\n              easeLinearity={0.35}\n            >\n              <TileLayer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\" />\n              {data && data.length\n                ? data.map((d, index) => (\n                    <Marker position={[d.Latitude, d.Longitude]} key={index}>\n                      <Popup>\n                        <Card className={classes.card}>\n                          {/* <CardMedia\n                        className={classes.cardMedia}\n                        image={card[\"logo_clean\"]}\n                        title=\"Image title\"\n                      /> */}\n                          <CardContent className={classes.cardContent}>\n                            <Typography\n                              gutterBottom\n                              variant=\"h6\"\n                              component=\"h2\"\n                            >\n                              {d[\"Centre name\"]}{\" \"}\n                              {d[\"Abbreviation\"]\n                                ? \"(\" + d[\"Abbreviation\"] + \")\"\n                                : \"\"}\n                            </Typography>\n                            <Typography color=\"textSecondary\">\n                              {d[\"Overview\"].length > 100\n                                ? d[\"Overview\"].substring(0, 100) + \"...\"\n                                : d[\"Overview\"]}\n                            </Typography>\n                            <b>Address</b>{\" \"}\n                            <Box fontStyle=\"oblique\">{d[\"Address\"]}</Box>\n                          </CardContent>\n                          <div className={classes.root}>\n                            {d[\"Sectors\"].split(\";\").map((c) => (\n                              <Chip\n                                size=\"small\"\n                                color=\"secondary\"\n                                variant=\"outlined\"\n                                label={c}\n                                key={c}\n                              />\n                            ))}\n                          </div>\n                          <Divider />\n                          <CardActions>\n                            <Button\n                              size=\"small\"\n                              color=\"primary\"\n                              // onClick={handleClickOpen(\"paper\", card)}\n                            >\n                              View more details\n                            </Button>\n                          </CardActions>\n                        </Card>\n                      </Popup>\n                    </Marker>\n                  ))\n                : \"\"}\n            </LeafletMap>\n          </Container>\n        </div>\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          developed By\n        </Typography>\n        <Copyright />\n      </footer>\n    </>\n  );\n}\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Link color=\"inherit\" href=\"#\">\n        Sumit Jangir\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}